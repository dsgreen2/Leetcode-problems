/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head){

         int val=1;

        vector<vector<int>> matrix(m,vector<int> (n,0));

        int row=matrix.size();
        int col=matrix[0].size();

        int l=0, r=col-1,t=0,b=row-1,d=0;

        while(l<=r && t<=b){

            if(d==0){

                for(int i=l;i<=r;i++){
                    if(head){
                    matrix[t][i]=head->val;
                     head=head->next;
                    }
                    else matrix[t][i]=-1;
                }
               
                t++;
                d=1;
            }

           else if(d==1){

               for(int i=t;i<=b;i++){
                   if(head){
                   matrix[i][r]=head->val;
                   head=head->next;
                   }
                   else matrix[i][r]=-1;
               }

               r--;
               d=2;
            }

            else if(d==2){

                for(int i=r;i>=l;i--){
                    if(head){
                    matrix[b][i]=head->val;
                      head=head->next;
                    }
                    else matrix[b][i]=-1;
                }
             
                b--;
                d=3;
            }

            else if(d==3){

                for(int i=b;i>=t;i--){
                    if(head){
                    matrix[i][l]=head->val;
                    head=head->next;
                    }
                    else matrix[i][l]=-1;
                }
            
                l++;
                d=0;
            }    
        }

        return matrix;
        
    }
};
