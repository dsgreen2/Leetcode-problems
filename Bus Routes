class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {

        unordered_map<int,vector<int>> umap;
        int maxe=0;
       for(int i=0;i<routes.size();i++){
           for(int j=0;j<routes[i].size();j++){
               umap[routes[i][j]].push_back(i);
               maxe=max(maxe,routes[i][j]);
           }
       }/*
     for(auto i:umap){
         //  cout<<i.first<<" : ";
          // for(auto j:i.second){
             //  cout<<j<<" ";  
           }
           //cout<<endl;
      }*/

       vector<int> vis1(maxe+1,0);
       vector<int> vis(routes.size(),0);
        queue<pair<int,int>> q;
        q.push({source,0});
      
        vis1[source]=1;
        while(!q.empty()){
            int x=q.size();
            while(x--){
                auto f=q.front();
               cout<<f.first<<endl;
                if(f.first==target) return f.second;
                q.pop();
                int flag=0;
                for(auto j:umap[f.first]){
                    if(!vis[j]){
                       cout<<"route not visited "<<j<<endl;
                        vis[j]=1;
                        for(auto m:routes[j]){
                          
                            if(!vis1[m]){
                                vis1[m]=1;
                                cout<<"not visited "<<m<<endl;
                                q.push({m,f.second+1});
                            }
                        }
                        flag=1;
                    }
                }
              
            }
        }

        return -1;
        
    }
};
