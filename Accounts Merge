class DisjointSet{
    vector<int> rank,parent,size;
    public:
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1,1);

        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }


    int findPar(int x){
        if(parent[x]==x)return x;
        return parent[x]=findPar(parent[x]);
    }

    void UnionByRank(int x,int y){
        int ulp_u=findPar(x);
        int ulp_v=findPar(y);

        if(ulp_u==ulp_v)return;

        if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
        else if(rank[ulp_v]<rank[ulp_u]){
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
        else {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }

    void UnionBySize(int x,int y){
        int ulp_u=findPar(x);
        int ulp_v=findPar(y);
        
        if(ulp_u==ulp_v)return;
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }

        else if(size[ulp_v]<size[ulp_u]){
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
        else {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }

};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {

        int n=accounts.size();
        DisjointSet d(n);
        unordered_map<string,int>umap;
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string mail=accounts[i][j];

                if(umap.find(mail)==umap.end()){
                    umap[mail]=i;
                }
                else{
                    d.UnionBySize(i,umap[mail]);
                }
            }
        }

        vector<string>v[n];
        for(auto i:umap){
            string mail=i.first;
            int j=d.findPar(i.second);
            v[j].push_back(mail);
        }

        vector<vector<string>>ans;

        for(int i=0;i<n;i++){
            if(v[i].size()==0)continue;
            sort(v[i].begin(),v[i].end());
            vector<string>temp;
            temp.push_back(accounts[i][0]);
            for(auto it:v[i])temp.push_back(it);
            ans.push_back(temp);

        }
        return ans;
    }
};
