class Solution {
public:
    int longestValidSubstring(string word, vector<string>& forbidden) {
       /* unordered_set<string> invalid;
        int maxl=0;
        for(auto i:forbidden){
             invalid.insert(i);
             int n=i.length();
             maxl=max(maxl,n);
        }

       int i=0,j=0;
       int ans=0;
       while(j<word.length()){
           int flag=0;
           string temp="";
           for(int k=j;k>=i;k--){
               temp=word[k]+temp;
               if(j-k+1<=max(10,maxl)){
               if(invalid.find(temp)!=invalid.end()){          
                   i=k+1;
                   flag=1;
                   break;
               }
               }
           }
           if(!flag){
                ans=max(ans,j-i+1);
                j++;
           }
           if(i>j)j++;
       }
        return ans;*/

        // store forbidden words in set
        int maxLen = 0;
        unordered_set<string> st;
        for(auto s : forbidden){
            st.insert(s);
            maxLen = max(maxLen, (int)s.size());
        }

        // sliding window
        int n = word.size();
        int ans = 0;
        int l = 0, r = 0;
        while(r < n){
            // check for forbidden substrings after including l in current window
            string temp;
            for(int i=r; (i >= l) && (i > r-maxLen); i--){      // need to check only upto maxLen
                temp = word[i] + temp;
                if(st.count(temp)){         // temp present in forbidden words
                    l = i+1;                // ith char can't be present in valid window, update 
                    break;
                }
            }
            r++;                            // slide right boundary for next iteration
            ans = max(ans, r-l);            // update ans for current window
        }
        return ans;
        
    }
};
