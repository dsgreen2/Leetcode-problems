class Solution {
public:
void f(int i,int n,vector<vector<string>>&ans,vector<string>&board,int col,int nd,int rd){

    if(i==n){
        ans.push_back(board);
        return;
    }
   // cout<<col<<" "<<nd<<" "<<rd<<endl;
    for(int j=0;j<n;j++){
    if((col & (1<<j))==0 && (nd & (1<<(i+j)))==0 && (rd & (1<<(j-i+n-1)))==0){
        int col1=col | (1<<j);
        int nd1=nd | (1<<(i+j));
        int rd1=rd | (1<<(j-i+n-1));

        board[i][j]='Q';
        f(i+1,n,ans,board,col1,nd1,rd1);
        board[i][j]='.';
    }
    }

}
    vector<vector<string>> solveNQueens(int n) {

        int col=0,nd=0,rd=0;

        vector<string>board;
        string s="";
        for(int i=0;i<n;i++){
            s=s+'.';
        }
        for(int i=0;i<n;i++)board.push_back(s);

        vector<vector<string>>ans;

        f(0,n,ans,board,col,nd,rd);
        return ans;
    }
};
