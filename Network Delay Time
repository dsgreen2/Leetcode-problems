class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {

        unordered_map<int,vector<pair<int,int>>>umap;
        for(int i=0;i<times.size();i++){
            umap[times[i][0]].push_back({times[i][1],times[i][2]});
        }

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        for(auto i:umap[k]){
            pq.push({i.second,i.first});
        }


        vector<int> result(n+1,1e9);

        result[k]=0;
        pq.push({0,k});


/*
        while(!pq.empty()){
            int d=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            for(auto &vec:umap[node]){
                int adjnode=vec.first;
                int dist=vec.second;

                if(d+dist<result[adjnode]){
                    result[adjnode]=d+dist;
                    pq.push({d+dist,adjnode});
                }
            }
        }
        */
        for(auto i:umap){
            cout<<i.first<<"-";
            for(auto j:i.second){
                cout<<j.first<<","<<j.second<<" ";
            }
            cout<<endl;
        }

        result[k]=0;
        int curr;
        int d;
        int dist;
        while(!pq.empty()){
            auto x=pq.top();
            pq.pop();
            curr=x.second;
            dist=x.first;
          //  cout<<"curr "<<curr<<" dist "<<dist<<endl;
            for(int i=0;i<umap[curr].size();i++){
             d=umap[curr][i].second;
             if(dist+d<result[umap[curr][i].first]){
                result[umap[curr][i].first]=dist+d;
                pq.push({dist+d,umap[curr][i].first});
             //   cout<<"pushing { "<<dist+d<<" , "<<umap[curr][i].first<<" }"<<endl;
            }

          }
        }

        //cout<<"ans "<<endl;
        int ans=0;
        for(int i=1;i<result.size();i++){
           // cout<<"i "<<i<<" ans[i] : "<<result[i]<<endl;
            ans=max(ans,result[i]);
        }

        return ans==1e9 ? -1:ans;
    }
};
