class Solution {
public:

void insertn(ListNode*&node1,ListNode*&temp,ListNode*&newhead){

    
               // cout<<"less val "<<temp->val<<endl;
                if(node1==NULL){
                    node1=temp;
                    newhead=node1;
                }
                else{
                    node1->next=temp;
                    node1=node1->next;
                    
                }
                node1->next=NULL;
    

}
    ListNode* partition(ListNode* head, int x) {

        ListNode*lessstart=NULL;
        ListNode*greaterstart=NULL;

        ListNode*temp=head;
        ListNode*newheadless=NULL;
        ListNode*newheadgreater=NULL;

        while(temp!=NULL){
            ListNode*n=temp->next;
            if(temp->val<x){
               // cout<<"less val "<<temp->val<<endl;
             insertn(lessstart,temp,newheadless);
            }
            else{
               // cout<<"greater val "<<temp->val<<endl;
               insertn(greaterstart,temp,newheadgreater);
            }
            temp=n;

        }
       /* cout<<"fine "<<endl;
        cout<<"smallerpart "<<endl;
        temp=newheadless;

        while(temp!=NULL){cout<<temp->val<<" ";temp=temp->next;}
        cout<<endl;
        cout<<"greater part"<<endl;
        
        temp=newheadgreater;
        while(temp!=NULL){cout<<temp->val<<" ";temp=temp->next;}
        cout<<endl;
*/
        if(newheadless==NULL)return newheadgreater;
        if(newheadgreater==NULL)return newheadless;
        else{
            lessstart->next=newheadgreater;
        }

        temp=newheadless;
/*
        while(temp!=NULL){cout<<temp->val<<" ";temp=temp->next;}
        cout<<endl;
        */
        return newheadless;
        
    }
};
